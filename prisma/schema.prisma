// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// * Recipe App Models

// * Tags for recipe model
// * feel free to add any more tags
enum Tag {
  // * Different Meal Times
  BREAKFAST
  LUNCH
  DINNER
  DESSERT
  DRINK
  SIDE
  OTHER
  // * Levels
  QUICK
  SNACK
  DIFFICULT
  EASY
  // * Diets
  HEALTHY
  VEGAN
  VEGETARIAN
  // * Cultures
  HALAL
  GREEK
  ITALIAN
  MEXICAN
  INDIAN
  JAPANESE
  CHINESE
  KOREAN
}

model Recipe {
  id          String  @id @default(cuid())
  title       String
  description String? @db.Text
  image       String?

  featured Boolean @default(false)

  // * Prisma mysql doesn't support array types, so we use Json instead
  ingredients Json?
  directions  Json?
  tags        Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // * Relationships
  authorId String
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments Comment[]

  // * Users that have saved this recipe
  savedBy User[] @relation("SavedRecipes")
  likedBy User[] @relation("LikedRecipes")

  @@index([authorId])
}

// * Comments for recipe model
model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // * Relationships
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  recipeId String
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  // * Replies to this comment
  replies       Comment[] @relation("Replies")
  parentComment Comment[] @relation("Replies")

  @@index([authorId])
  @@index([recipeId])
}

// * All Models Below Are Necessary for Next auth
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]

  // * Recipe App
  username String? @unique
  password String?
  role     Role    @default(USER)

  // * Personal Info
  bio          String? @db.Text
  favoriteFood String?
  favoriteTag  Tag?

  // * Relationships
  recipes  Recipe[]
  comments Comment[]

  // * Users Saved / Favorited Recipes
  savedRecipes Recipe[] @relation("SavedRecipes")
  likedRecipes Recipe[] @relation("LikedRecipes")

  @@index([username])
  @@index([email])
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], name: "accountUserId")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId], name: "sessionUserId")
}

enum Role {
  USER
  ADMIN
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
